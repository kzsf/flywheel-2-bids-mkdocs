{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flywheel2BIDS","text":"<p>Scripts to get data from Flywheel and convert to BIDS format.</p>"},{"location":"#how-to-use","title":"How to Use","text":""},{"location":"#1-clone-the-repository-locally","title":"1. Clone the repository locally","text":"<ul> <li>Clone the repository on your local computer by running the following command in your terminal: </li> </ul> <p><code>git clone https://github.com/PostonLab/flywheel_2_BIDS.git</code></p> <ul> <li>Change directories into the repository and locate the config.yml file. </li> </ul> <p><code>cd path_to_cloned_repository</code> </p>"},{"location":"#2-set-up-configyml-file","title":"2. Set up config.yml file","text":"<ul> <li>The <code>config.yml</code> file is a file used to customize the converter.py script to handle your specific project. Edit the config.yml file to fit your project needs. You will need to create a Flywheel API key to complete this step. </li> <li>For detailed instructions on how to set up the config file or create a Flywheel API key, please refer to their respective pages.  </li> </ul>"},{"location":"#3-run-converterpy","title":"3. Run Converter.py","text":"<ul> <li>The <code>converter.py</code> file is a python script that downloads your specified data from Flywheel (using parameters set in the config.yml file) and outputs the data in BIDS format.</li> <li> <p>To run the converter:</p> <ul> <li> <p>In your terminal, <code>cd</code> into the repository where the converter.py file is located.</p> </li> <li> <p>Next, run the following command to run the script: </p> </li> </ul> <p><code>python converter.py</code> </p> </li> <li> <p>If everything worked, the output will be BIDS formatted scans located in the <code>output_dir</code> parameter set in the config.yml file.</p> </li> </ul>"},{"location":"API_key/","title":"Creating Your Flywheel API Key","text":"<ul> <li>Login to Flywheel at  https://lucascenter.flywheel.io/.</li> <li>Select your profile icon on the top right of the page and click <code>Profile</code>.</li> <li>Scroll down to the <code>Flywheel Access</code> section and click <code>Generate API Key</code>.</li> <li>Name your key, add an <code>Expiration Date</code> of your choosing, and click <code>Add Key</code> to save. </li> <li>Make sure to securely save your new API key (only accessible once!)</li> </ul>"},{"location":"API_key/#logging-in-using-flywheel-cli-optional","title":"Logging In Using Flywheel CLI (Optional)","text":"<ul> <li> <p>You can now use your API key to log into flywheel with the Flywheel CLI by using the following command template.</p> <p>In terminal, run: <code>fw login your_api_key</code></p> </li> <li> <p>Refer to the following documentation for more details on how to set up Flywheel CLI:</p> <p>https://docs.flywheel.io/CLI/</p> </li> </ul>"},{"location":"configfile/","title":"Config.yml File Setup","text":"<p>This is a reference for all template options when setting up your config.yml file.</p> <ul> <li>api_key: \"<code>enter your</code> Flywheel API key <code>here</code>\"</li> <li>participants_csv: \"<code>enter the name of the csv file containing your participants list</code>\"</li> <li>fw_project_path: \"<code>enter the directory address of your flywheel project</code>\"</li> <li>output_dir: \"<code>enter the directory where you want to output the end product</code>\"</li> <li>temp_dir: \"<code>enter the directory of the intermediary files</code>\"</li> <li> <p>config_json: \"<code>enter the directory of the dcm2bids_config.json file (necessary to run dcm2bids, an intermediary tool used to convert dicom files to BIDS format)</code>\" </p> <p>Detailed instructions on how to set up the <code>dcm2bids_config.json</code> file can be found here: https://unfmontreal.github.io/Dcm2Bids/3.1.1/how-to/create-config-file/#configuration-file-example</p> </li> <li> <p>num_threads: \"<code>insert desired number of threads here</code>\"</p> <p>If exceeding 10 in Gene, please use 'nice -n' as described in https://gene.stanford.edu/docs/#temporary-files.</p> </li> <li> <p>scan_names:</p> <p><code>- enter the name of the scan of interest</code></p> <p><code>- subsequent_scan_name</code></p> </li> <li> <p>exclude_strings: </p> <p><code>- enter the name of string patterns you wish to exclude from the download</code></p> <p><code>- subsequent_scan_name</code></p> </li> <li> <p>BIDS_validate: <code>enter True/False. if set to \"True\", BIDS_validate will test whether the files were successfully converted to BIDS format.</code> </p> </li> <li>clean_up: <code>enter True/False. Set to False only if you want to keep the intermediate dicom files (not recommended!)</code></li> </ul>"},{"location":"configfile/#example-setup","title":"Example Setup","text":"<pre><code>api_key: \"your_API_key\"  \nparticipants_csv: \"participants_ids.csv\" \nfw_project_path: \"mormino/Lucas_PETMR\"\noutput_dir: \"/mnt/poston/projects/parkinsons/postonlab/EvaETP_IVIM/test_fw_bids\"\ntemp_dir: \"/scratch\"\nconfig_json: \"/mnt/poston/projects/parkinsons/postonlab/EvaETP_IVIM/flywheel_2_BIDS/dcm2bids_config.json\"\nnum_threads: 5 \nscan_names:\n  - CLARiTI_Accelerated_Sagittal\n  - DTI_108_7s_2thick_2space_DL\n  - DTI_84_7s_2thick_2space_DL_pepolar \n  - CLARiTI_Accelerated_Sagittal\n  - Accelerated Sagittal IR-FSPGR (SCAN)\nexclude_strings:\n  - SOURCE\nBIDS_validate: True \nclean_up: True \n</code></pre>"}]}